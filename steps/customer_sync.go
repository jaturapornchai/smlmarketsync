package steps

import (
	"database/sql"
	"fmt"
	"smlmarketsync/config"
	"smlmarketsync/types"
)

type CustomerSyncStep struct {
	db        *sql.DB
	apiClient *config.APIClient
}

func NewCustomerSyncStep(db *sql.DB) *CustomerSyncStep {
	return &CustomerSyncStep{
		db:        db,
		apiClient: config.NewAPIClient(),
	}
}

// ExecuteCustomerSync ‡∏£‡∏±‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 6: ‡∏Å‡∏≤‡∏£ sync ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
func (s *CustomerSyncStep) ExecuteCustomerSync() error {
	fmt.Println("=== ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 6: ‡∏ã‡∏¥‡∏á‡∏Ñ‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏Å‡∏±‡∏ö API ===")

	// 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á ar_customer
	fmt.Println("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á ar_customer ‡∏ö‡∏ô API...")
	err := s.apiClient.CreateCustomerTable()
	if err != nil {
		return fmt.Errorf("error creating customer table: %v", err)
	}
	fmt.Println("‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö/‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á ar_customer ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")

	// 2. ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏à‡∏≤‡∏Å local database
	fmt.Println("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• local...")
	localData, err := s.GetAllCustomersFromSource()
	if err != nil {
		return fmt.Errorf("error getting local customer data: %v", err)
	}

	if len(localData) == 0 {
		fmt.Println("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô local database")
		return nil
	}

	fmt.Printf("‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏à‡∏≤‡∏Å local ‡πÑ‡∏î‡πâ %d ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£\n", len(localData))

	// 3. ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏≤‡∏Å API (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥)
	fmt.Println("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏≤‡∏Å API...")
	existingData, err := s.apiClient.GetExistingCustomerData()
	if err != nil {
		return fmt.Errorf("error getting existing customer data: %v", err)
	}
	fmt.Printf("‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô API ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß %d ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£\n", len(existingData))

	// 4. ‡∏ã‡∏¥‡∏á‡∏Ñ‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏î‡∏¢‡∏™‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÅ‡∏ö‡∏ö batch UPSERT
	fmt.Println("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡πÅ‡∏•‡∏∞‡∏ã‡∏¥‡∏á‡∏Ñ‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ (batch UPSERT)...")
	fmt.Printf("üì¶ ‡∏à‡∏∞‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• %d ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ batch UPSERT\n", len(localData))

	insertCount, updateCount, err := s.apiClient.SyncCustomerData(localData, existingData)
	if err != nil {
		return fmt.Errorf("error syncing customer data: %v", err)
	}

	fmt.Printf("‚úÖ ‡∏ã‡∏¥‡∏á‡∏Ñ‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß (batch UPSERT)\n")
	fmt.Printf("üìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ã‡∏¥‡∏á‡∏Ñ‡πå‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤:\n")
	fmt.Printf("   - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô local: %d ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£\n", len(localData))
	fmt.Printf("   - Insert ‡πÉ‡∏´‡∏°‡πà: %d ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ (‡πÅ‡∏ö‡∏ö batch)\n", insertCount)
	fmt.Printf("   - Update ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà: %d ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ (‡πÅ‡∏ö‡∏ö batch)\n", updateCount)
	fmt.Printf("   - ‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á: %d ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£\n", len(localData)-insertCount-updateCount)

	return nil
}

// GetAllCustomersFromSource ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡πâ‡∏ô‡∏ó‡∏≤‡∏á
func (s *CustomerSyncStep) GetAllCustomersFromSource() ([]interface{}, error) {
	query := `
		SELECT code, price_level 
		FROM ar_customer
		WHERE code IS NOT NULL AND code != ''
		ORDER BY code
	`

	fmt.Println("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏à‡∏≤‡∏Å ar_customer...")
	rows, err := s.db.Query(query)
	if err != nil {
		return nil, fmt.Errorf("error executing customer query: %v", err)
	}
	defer rows.Close()

	var customers []interface{}
	count := 0

	for rows.Next() {
		var customer types.CustomerItem
		err := rows.Scan(
			&customer.Code,
			&customer.PriceLevel,
		)
		if err != nil {
			fmt.Printf("‚ö†Ô∏è ‡∏Ç‡πâ‡∏≤‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ: %v\n", err)
			continue
		}

		// ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô map ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö API
		customerMap := map[string]interface{}{
			"code":        customer.Code,
			"price_level": customer.PriceLevel,
		}

		customers = append(customers, customerMap)
		count++

		// ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏∏‡∏Å‡πÜ 1000 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
		if count%1000 == 0 {
			fmt.Printf("‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÅ‡∏•‡πâ‡∏ß %d ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£...\n", count)
		}
	}

	if err = rows.Err(); err != nil {
		return nil, fmt.Errorf("error iterating customer rows: %v", err)
	}

	fmt.Printf("‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡πÑ‡∏î‡πâ %d ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£\n", count)
	return customers, nil
}
