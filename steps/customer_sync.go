package steps

import (
	"database/sql"
	"fmt"
	"smlmarketsync/config"
	"smlmarketsync/types"
	"strings"
	"time"
)

type CustomerSyncStep struct {
	db        *sql.DB
	apiClient *config.APIClient
}

func NewCustomerSyncStep(db *sql.DB) *CustomerSyncStep {
	return &CustomerSyncStep{
		db:        db,
		apiClient: config.NewAPIClient(),
	}
}

// ExecuteCustomerSync ‡∏£‡∏±‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡∏≤‡∏£ sync ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ (‡∏ï‡∏≤‡∏°‡πÅ‡∏ö‡∏ö Product Sync)
func (s *CustomerSyncStep) ExecuteCustomerSync() error {
	fmt.Println("=== ‡∏ã‡∏¥‡∏á‡∏Ñ‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏Å‡∏±‡∏ö API ===")

	// 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á ar_customer
	fmt.Println("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á ar_customer ‡∏ö‡∏ô API...")
	err := s.apiClient.CreateCustomerTable()
	if err != nil {
		return fmt.Errorf("error creating customer table: %v", err)
	}
	fmt.Println("‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö/‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á ar_customer ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")

	// 2. ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏à‡∏≤‡∏Å local database ‡∏ú‡πà‡∏≤‡∏ô sml_market_sync
	fmt.Println("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• local...")
	syncIds, inserts, updates, deletes, err := s.GetAllCustomersFromSource()
	if err != nil {
		return fmt.Errorf("error getting local customer data: %v", err)
	}

	if len(syncIds) == 0 {
		fmt.Println("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô local database")
		return nil
	}

	// 3. ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô sml_market_sync ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ã‡∏¥‡∏á‡∏Ñ‡πå‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏ö‡∏ö batch
	err = s.DeleteSyncRecordsInBatches(syncIds, 100) // ‡∏•‡∏ö‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏•‡∏∞ 100 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
	if err != nil {
		fmt.Printf("‚ö†Ô∏è Warning: %v\n", err)
		// ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏ñ‡∏∂‡∏á‡πÅ‡∏°‡πâ‡∏à‡∏∞‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
	}
	// 4. ‡∏ã‡∏¥‡∏á‡∏Ñ‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏¢‡∏±‡∏á API
	fmt.Println("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ã‡∏¥‡∏á‡∏Ñ‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÑ‡∏õ‡∏¢‡∏±‡∏á API...")
	err = s.apiClient.SyncCustomerData(inserts, updates, deletes) // ‡∏™‡πà‡∏á inserts, updates, deletes ‡πÅ‡∏¢‡∏Å‡∏Å‡∏±‡∏ô
	if err != nil {
		return fmt.Errorf("error syncing customer data to API: %v", err)
	}
	fmt.Println("‚úÖ ‡∏ã‡∏¥‡∏á‡∏Ñ‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
	return nil
}

// GetAllCustomersFromSource ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡πâ‡∏ô‡∏ó‡∏≤‡∏á ‡∏ú‡πà‡∏≤‡∏ô sml_market_sync
func (s *CustomerSyncStep) GetAllCustomersFromSource() ([]int, []interface{}, []interface{}, []interface{}, error) {
	var syncIds []int
	var deletes []interface{}
	var inserts []interface{}
	var updates []interface{}

	// ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å sml_market_sync ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á customer (table_id = 4)
	querySync := "SELECT id, row_order_ref, active_code FROM sml_market_sync WHERE table_id = 4 ORDER BY active_code DESC"

	rowsSync, errSync := s.db.Query(querySync)
	if errSync != nil {
		return nil, nil, nil, nil, fmt.Errorf("error executing customer sync query: %v", errSync)
	}
	defer rowsSync.Close()

	for rowsSync.Next() {
		var id, rowOrderRef, activeCode int
		err := rowsSync.Scan(&id, &rowOrderRef, &activeCode)
		if err != nil {
			return nil, nil, nil, nil, fmt.Errorf("error scanning customer sync row: %v", err)
		}
		syncIds = append(syncIds, id)

		if activeCode != 3 {
			// ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏à‡∏≤‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á ar_customer (local database)
			queryGetData := `
				SELECT roworder, code, price_level 
				FROM ar_customer
				WHERE roworder = $1 AND code IS NOT NULL AND code != ''
			`
			// log queryGetData (following price sync pattern)
			fmt.Printf("Executing customer query: %s with rowOrderRef: %d\n", queryGetData, rowOrderRef)
			row := s.db.QueryRow(queryGetData, rowOrderRef)

			var customer types.CustomerItem
			var priceLevel sql.NullString
			err := row.Scan(
				&customer.RowOrderRef,
				&customer.Code,
				&priceLevel,
			)
			if err != nil {
				if err == sql.ErrNoRows {
					fmt.Printf("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö rowOrderRef: %d\n", rowOrderRef)
					continue
				}
				return nil, nil, nil, nil, fmt.Errorf("error scanning customer row: %v", err)
			}

			// ‡πÅ‡∏õ‡∏•‡∏á price_level
			if priceLevel.Valid {
				customer.PriceLevel = priceLevel.String
			}

			// ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô map ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö API
			customerMap := map[string]interface{}{
				"row_order_ref": customer.RowOrderRef,
				"code":        customer.Code,
				"price_level": customer.PriceLevel,
			}

			// ‡πÅ‡∏¢‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ï‡∏≤‡∏° active_code
			if activeCode == 1 {
				// activeCode = 1: INSERT ‡πÉ‡∏´‡∏°‡πà
				inserts = append(inserts, customerMap)
			}
			if activeCode == 2 {
				// activeCode = 2: DELETE ‡∏ö‡∏ô server ‡∏Å‡πà‡∏≠‡∏ô ‡πÅ‡∏•‡πâ‡∏ß INSERT ‡πÉ‡∏´‡∏°‡πà (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà UPDATE)
				deletes = append(deletes, customer.RowOrderRef) // ‡πÉ‡∏ä‡πâ row_order_ref ‡πÄ‡∏õ‡πá‡∏ô key ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö
				inserts = append(inserts, customerMap)   // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤ inserts ‡πÄ‡∏û‡∏∑‡πà‡∏≠ insert ‡πÉ‡∏´‡∏°‡πà
			}
		} else if activeCode == 3 {
			deletes = append(deletes, rowOrderRef)
		}
	}

	return syncIds, inserts, updates, deletes, nil
}

// DeleteSyncRecordsInBatches ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å sml_market_sync ‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡πâ‡∏≠‡∏á‡∏ñ‡∏¥‡πà‡∏ô‡πÅ‡∏ö‡∏ö‡πÅ‡∏ö‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô batch
func (s *CustomerSyncStep) DeleteSyncRecordsInBatches(syncIds []int, batchSize int) error {
	if len(syncIds) == 0 {
		fmt.Println("‚úÖ ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏•‡∏ö‡∏à‡∏≤‡∏Å sml_market_sync")
		return nil
	}

	totalItems := len(syncIds)
	fmt.Printf("üóëÔ∏è ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á sml_market_sync (local database): %d ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ (‡πÅ‡∏ö‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô batch ‡∏•‡∏∞ %d ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£)\n",
		totalItems, batchSize)

	// ‡πÅ‡∏ö‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô batch
	batchCount := (totalItems + batchSize - 1) / batchSize
	totalDeleted := 0
	successBatches := 0
	failedBatches := 0

	for b := 0; b < batchCount; b++ {
		start := b * batchSize
		end := start + batchSize
		if end > totalItems {
			end = totalItems
		}

		batchIds := syncIds[start:end]
		currentBatchSize := len(batchIds)

		fmt.Printf("   üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡∏ö batch ‡∏ó‡∏µ‡πà %d/%d (‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ %d-%d) ‡∏à‡∏≤‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î %d ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£\n",
			b+1, batchCount, start+1, end, totalItems)

		// ‡∏™‡∏£‡πâ‡∏≤‡∏á query ‡πÅ‡∏•‡∏∞ parameter placeholders
		placeholders := make([]string, len(batchIds))
		args := make([]interface{}, len(batchIds))

		for i, id := range batchIds {
			placeholders[i] = fmt.Sprintf("$%d", i+1)
			args[i] = id
		}
		// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á DELETE
		query := fmt.Sprintf("DELETE FROM sml_market_sync WHERE id IN (%s)",
			strings.Join(placeholders, ", "))

		// ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
		result, err := s.db.Exec(query, args...)
		if err != nil {
			fmt.Printf("   ‚ùå ERROR: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• batch ‡∏ó‡∏µ‡πà %d ‡∏à‡∏≤‡∏Å sml_market_sync ‡πÑ‡∏î‡πâ: %v\n",
				b+1, err)
			failedBatches++
			// ‡∏ó‡∏≥ batch ‡∏ï‡πà‡∏≠‡πÑ‡∏õ
			continue
		}

		rowsAffected, err := result.RowsAffected()
		if err != nil {
			fmt.Printf("   ‚ö†Ô∏è Warning: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡πÑ‡∏î‡πâ: %v\n", err)
			// ‡πÉ‡∏ä‡πâ‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡∏≠‡∏á batch ‡πÅ‡∏ó‡∏ô
			rowsAffected = int64(currentBatchSize)
		}

		totalDeleted += int(rowsAffected)
		successBatches++
		fmt.Printf("   ‚úÖ ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• batch ‡∏ó‡∏µ‡πà %d ‡∏à‡∏≤‡∏Å sml_market_sync ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: %d ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£\n",
			b+1, rowsAffected)

		// ‡∏´‡∏ô‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á batch ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏î‡∏†‡∏≤‡∏£‡∏∞‡∏Ç‡∏≠‡∏á database
		if b < batchCount-1 {
			time.Sleep(100 * time.Millisecond)
		}
	}

	// ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£
	if failedBatches > 0 {
		fmt.Printf("‚ö†Ô∏è ‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å sml_market_sync: ‡∏•‡∏ö‡πÑ‡∏î‡πâ %d/%d ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ (%d/%d batches ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à)\n",
			totalDeleted, totalItems, successBatches, batchCount)
		return fmt.Errorf("‡∏°‡∏µ‡∏ö‡∏≤‡∏á batch ‡∏ó‡∏µ‡πà‡∏•‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%d/%d batches ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß)",
			failedBatches, batchCount)
	}
	fmt.Printf("‚úÖ ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å sml_market_sync ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß: %d ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ (%d batches)\n",
		totalDeleted, batchCount)
	return nil
}
