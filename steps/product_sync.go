package steps

import (
	"database/sql"
	"fmt"
	"smlmarketsync/config"
	"smlmarketsync/types"
	"strings"
)

type ProductSyncStep struct {
	db        *sql.DB
	apiClient *config.APIClient
}

func NewProductSyncStep(db *sql.DB) *ProductSyncStep {
	return &ProductSyncStep{
		db:        db,
		apiClient: config.NewAPIClient(),
	}
}

// ExecuteProductSync ‡∏£‡∏±‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 1-4: ‡∏Å‡∏≤‡∏£ sync ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
func (s *ProductSyncStep) ExecuteProductSync() error {
	// ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 1: ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏ï‡∏≤‡∏£‡∏≤‡∏á ic_inventory_barcode_temp
	fmt.Println("=== ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 1: ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏ï‡∏≤‡∏£‡∏≤‡∏á ic_inventory_barcode_temp ‡∏ú‡πà‡∏≤‡∏ô API ===")
	err := s.PrepareInventoryTempTableViaAPI()
	if err != nil {
		return fmt.Errorf("error preparing temp table: %v", err)
	}

	// ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 2: ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
	fmt.Println("=== ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 2: ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡πâ‡∏ô‡∏ó‡∏≤‡∏á ===")
	inventoryItems, err := s.GetAllInventoryItemsFromSource()
	if err != nil {
		return fmt.Errorf("error getting inventory items: %v", err)
	}

	if len(inventoryItems) == 0 {
		fmt.Println("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡πâ‡∏ô‡∏ó‡∏≤‡∏á")
		return nil
	}

	fmt.Printf("‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î %d ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£\n", len(inventoryItems))

	// ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 3: Upload ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô batch
	fmt.Println("=== ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 3: Upload ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ ic_inventory_barcode_temp ‡∏ú‡πà‡∏≤‡∏ô API ===")
	batchSize := 500
	err = s.UploadInventoryItemsBatchViaAPI(inventoryItems, batchSize)
	if err != nil {
		return fmt.Errorf("error uploading inventory items: %v", err)
	}

	// ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 4: ‡∏ã‡∏¥‡∏á‡∏Ñ‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏±‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á ic_inventory_barcode
	fmt.Println("=== ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 4: ‡∏ã‡∏¥‡∏á‡∏Ñ‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏±‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á ic_inventory_barcode ===")
	err = s.SyncInventoryData()
	if err != nil {
		return fmt.Errorf("error syncing inventory data: %v", err)
	}

	return nil
}

// PrepareInventoryTempTableViaAPI ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏ï‡∏≤‡∏£‡∏≤‡∏á temp ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
func (s *ProductSyncStep) PrepareInventoryTempTableViaAPI() error {
	fmt.Println("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏ï‡∏≤‡∏£‡∏≤‡∏á ic_inventory_barcode_temp ‡∏ú‡πà‡∏≤‡∏ô API...")

	// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
	checkQuery := `
		SELECT COUNT(*) 
		FROM information_schema.tables 
		WHERE table_name = 'ic_inventory_barcode_temp'
	`

	resp, err := s.apiClient.ExecuteSelect(checkQuery)
	if err != nil {
		return fmt.Errorf("error checking temp table existence: %v", err)
	}

	// ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡∏•‡∏ö‡∏≠‡∏≠‡∏Å
	if resp.Success {
		fmt.Println("‡∏û‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á ic_inventory_barcode_temp ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏≥‡∏•‡∏±‡∏á drop ‡∏ú‡πà‡∏≤‡∏ô API...")
		dropQuery := "DROP TABLE IF EXISTS ic_inventory_barcode_temp"
		resp, err := s.apiClient.ExecuteCommand(dropQuery)
		if err != nil {
			return fmt.Errorf("error dropping temp table: %v", err)
		}
		if !resp.Success {
			return fmt.Errorf("failed to drop temp table: %s", resp.Message)
		}
		fmt.Println("‚úÖ ‡∏•‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á ic_inventory_barcode_temp ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß (‡∏ú‡πà‡∏≤‡∏ô API)")
	}

	// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
	fmt.Println("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á ic_inventory_barcode_temp ‡πÉ‡∏´‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô API...")
	createQuery := `
		CREATE TABLE ic_inventory_barcode_temp (
			ic_code VARCHAR(50) NOT NULL,
			barcode VARCHAR(100) NOT NULL,
			name VARCHAR(255),
			unit_code VARCHAR(20),
			unit_name VARCHAR(100),
			created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
			PRIMARY KEY (barcode)
		)
	`

	resp, err = s.apiClient.ExecuteCommand(createQuery)
	if err != nil {
		return fmt.Errorf("error creating temp table: %v", err)
	}

	if !resp.Success {
		return fmt.Errorf("failed to create temp table: %s", resp.Message)
	}

	fmt.Println("‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á ic_inventory_barcode_temp ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß (‡∏ú‡πà‡∏≤‡∏ô API)")
	return nil
}

// GetAllInventoryItemsFromSource ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
func (s *ProductSyncStep) GetAllInventoryItemsFromSource() ([]interface{}, error) {
	query := `
		SELECT 
			ic_code, 
			barcode,
			(SELECT name_1 FROM ic_inventory WHERE code=ic_code) as name,
			unit_code,
			(SELECT name_1 FROM ic_unit WHERE code=unit_code) as unit_name 
		FROM ic_inventory_barcode
		WHERE barcode IS NOT NULL AND barcode != ''
		ORDER BY barcode
	`

	fmt.Println("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏à‡∏≤‡∏Å ic_inventory_barcode...")
	rows, err := s.db.Query(query)
	if err != nil {
		return nil, fmt.Errorf("error executing inventory query: %v", err)
	}
	defer rows.Close()

	var items []interface{}
	count := 0

	for rows.Next() {
		var item types.InventoryItem
		err := rows.Scan(
			&item.IcCode,
			&item.Barcode,
			&item.Name,
			&item.UnitCode,
			&item.UnitName,
		)
		if err != nil {
			fmt.Printf("‚ö†Ô∏è ‡∏Ç‡πâ‡∏≤‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ: %v\n", err)
			continue
		}

		// ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô map ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö API
		itemMap := map[string]interface{}{
			"ic_code":   item.IcCode,
			"barcode":   item.Barcode,
			"name":      item.Name,
			"unit_code": item.UnitCode,
			"unit_name": item.UnitName,
		}

		items = append(items, itemMap)
		count++

		// ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏∏‡∏Å‡πÜ 5000 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
		if count%5000 == 0 {
			fmt.Printf("‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÅ‡∏•‡πâ‡∏ß %d ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£...\n", count)
		}
	}

	if err = rows.Err(); err != nil {
		return nil, fmt.Errorf("error iterating inventory rows: %v", err)
	}

	fmt.Printf("‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡πÑ‡∏î‡πâ %d ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£\n", count)
	return items, nil
}

// UploadInventoryItemsBatchViaAPI ‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö batch
func (s *ProductSyncStep) UploadInventoryItemsBatchViaAPI(items []interface{}, batchSize int) error {
	totalItems := len(items)
	totalBatches := (totalItems + batchSize - 1) / batchSize

	fmt.Printf("‡∏Å‡∏≥‡∏•‡∏±‡∏á upload ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î %d ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ú‡πà‡∏≤‡∏ô API (batch size: %d)\n", totalItems, batchSize)

	for i := 0; i < totalItems; i += batchSize {
		end := i + batchSize
		if end > totalItems {
			end = totalItems
		}

		batchNum := (i / batchSize) + 1
		fmt.Printf("‡∏Å‡∏≥‡∏•‡∏±‡∏á upload batch %d/%d (‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ %d-%d) ‡∏ú‡πà‡∏≤‡∏ô API\n", batchNum, totalBatches, i+1, end)

		err := s.uploadBatch(items[i:end])
		if err != nil {
			return fmt.Errorf("error uploading batch %d: %v", batchNum, err)
		}

		fmt.Printf("‚úÖ Upload batch %d ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%d ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£)\n", batchNum, end-i)
	}

	fmt.Printf("‚úÖ Upload ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î %d ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô (‡∏ú‡πà‡∏≤‡∏ô API)\n", totalItems)
	return nil
}

// uploadBatch ‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• 1 batch
func (s *ProductSyncStep) uploadBatch(batch []interface{}) error {
	if len(batch) == 0 {
		return nil
	}

	var values []string
	for _, item := range batch {
		if itemMap, ok := item.(map[string]interface{}); ok {
			icCode := fmt.Sprintf("%v", itemMap["ic_code"])
			barcode := fmt.Sprintf("%v", itemMap["barcode"])
			name := fmt.Sprintf("%v", itemMap["name"])
			unitCode := fmt.Sprintf("%v", itemMap["unit_code"])
			unitName := fmt.Sprintf("%v", itemMap["unit_name"])

			// Escape single quotes
			name = strings.ReplaceAll(name, "'", "''")
			unitName = strings.ReplaceAll(unitName, "'", "''")

			value := fmt.Sprintf("('%s', '%s', '%s', '%s', '%s')",
				icCode, barcode, name, unitCode, unitName)
			values = append(values, value)
		}
	}

	if len(values) == 0 {
		return nil
	}

	query := fmt.Sprintf(`
		INSERT INTO ic_inventory_barcode_temp (ic_code, barcode, name, unit_code, unit_name)
		VALUES %s
	`, strings.Join(values, ","))

	resp, err := s.apiClient.ExecuteCommand(query)
	if err != nil {
		return fmt.Errorf("error executing batch insert: %v", err)
	}

	if !resp.Success {
		return fmt.Errorf("batch insert failed: %s", resp.Message)
	}

	return nil
}

// SyncInventoryData ‡∏ã‡∏¥‡∏á‡∏Ñ‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á temp ‡πÅ‡∏•‡∏∞ main table
func (s *ProductSyncStep) SyncInventoryData() error {
	// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á ic_inventory_barcode
	fmt.Println("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á ic_inventory_barcode...")
	err := s.apiClient.CreateInventoryTable()
	if err != nil {
		return fmt.Errorf("error creating inventory table: %v", err)
	}
	fmt.Println("‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö/‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á ic_inventory_barcode ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")

	// ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡πÅ‡∏•‡∏∞‡∏ã‡∏¥‡∏á‡∏Ñ‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
	fmt.Println("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡πÅ‡∏•‡∏∞‡∏ã‡∏¥‡∏á‡∏Ñ‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á 2 ‡∏ï‡∏≤‡∏£‡∏≤‡∏á...")
	insertCount, updateCount, err := s.apiClient.SyncInventoryTableData()
	if err != nil {
		return fmt.Errorf("error syncing inventory data: %v", err)
	}

	fmt.Println("‚úÖ ‡∏ã‡∏¥‡∏á‡∏Ñ‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á temp table ‡πÅ‡∏•‡∏∞ main table ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
	fmt.Printf("üìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ã‡∏¥‡∏á‡∏Ñ‡πå:\n")
	fmt.Printf("   - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô temp table: %d ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£\n", insertCount+updateCount)
	fmt.Printf("   - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• active ‡πÉ‡∏ô main table: %d ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£\n", insertCount)
	fmt.Printf("   - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• inactive ‡πÉ‡∏ô main table: %d ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£\n", updateCount)

	return nil
}
