package steps

import (
	"database/sql"
	"fmt"
	"smlmarketsync/config"
	"smlmarketsync/types"
	"strconv"
	"time"
)

type PriceSyncStep struct {
	db        *sql.DB
	apiClient *config.APIClient
}

func NewPriceSyncStep(db *sql.DB) *PriceSyncStep {
	return &PriceSyncStep{
		db:        db,
		apiClient: config.NewAPIClient(),
	}
}

// ExecutePriceSync ‡∏£‡∏±‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 7: ‡∏Å‡∏≤‡∏£ sync ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
func (s *PriceSyncStep) ExecutePriceSync() error {
	fmt.Println("=== ‡∏ã‡∏¥‡∏á‡∏Ñ‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Å‡∏±‡∏ö API ===") // 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á ic_inventory_price
	fmt.Println("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á ic_inventory_price ‡∏ö‡∏ô API...")
	err := s.apiClient.CreatePriceTable()
	if err != nil {
		return fmt.Errorf("error creating price table: %v", err)
	}
	fmt.Println("‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö/‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á ic_inventory_price ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
	// 2. ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏à‡∏≤‡∏Å local database
	fmt.Println("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• local...")
	syncIds, inserts, updates, deletes, err := s.GetAllPricesFromSource()
	if err != nil {
		return fmt.Errorf("error getting local price data: %v", err)
	}
	if len(syncIds) == 0 {
		fmt.Println("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô local database")
		return nil
	}

	// 3. ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô sml_market_sync ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ã‡∏¥‡∏á‡∏Ñ‡πå‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏ö‡∏ö batch
	err = s.DeleteSyncRecordsInBatches(syncIds, 100) // ‡∏•‡∏ö‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏•‡∏∞ 100 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
	if err != nil {
		fmt.Printf("‚ö†Ô∏è Warning: %v\n", err)
		// ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏ñ‡∏∂‡∏á‡πÅ‡∏°‡πâ‡∏à‡∏∞‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
	}

	// 4. ‡∏ã‡∏¥‡∏á‡∏Ñ‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏¢‡∏±‡∏á API
	fmt.Println("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ã‡∏¥‡∏á‡∏Ñ‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÑ‡∏õ‡∏¢‡∏±‡∏á API...")
	s.apiClient.SyncPriceData(nil, inserts, updates, deletes) // ‡∏™‡πà‡∏á nil ‡πÅ‡∏ó‡∏ô syncIds ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÄ‡∏£‡∏≤‡∏•‡∏ö‡πÄ‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß
	fmt.Println("‚úÖ ‡∏ã‡∏¥‡∏á‡∏Ñ‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")

	return nil
}

// GetAllPricesFromSource ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡πâ‡∏ô‡∏ó‡∏≤‡∏á
func (s *PriceSyncStep) GetAllPricesFromSource() ([]int, []interface{}, []interface{}, []interface{}, error) {
	var syndIds []int
	var deletes []interface{}
	var inserts []interface{}
	var updates []interface{}

	querySync := "SELECT id, row_order_ref, active_code FROM sml_market_sync where table_id = 1 ORDER BY active_code DESC"

	rowsSync, errSync := s.db.Query(querySync)
	if errSync != nil {
		return nil, nil, nil, nil, fmt.Errorf("error executing sync query: %v", errSync)
	}
	defer rowsSync.Close()

	for rowsSync.Next() {
		var id, rowOrderRef, activeCode int
		err := rowsSync.Scan(&id, &rowOrderRef, &activeCode)
		if err != nil {
			return nil, nil, nil, nil, fmt.Errorf("error scanning sync row: %v", err)
		}
		syndIds = append(syndIds, id)

		if activeCode != 3 {
			// ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡∏¥‡∏ö
			queryGetData := `
				SELECT roworder,ic_code, unit_code, from_qty, to_qty, from_date, to_date, 
					sale_type, sale_price1, status, price_type, cust_code, 
					sale_price2, cust_group_1, price_mode
				FROM ic_inventory_price 
				WHERE roworder = $1
			`
			// log queryGetData
			fmt.Printf("Executing query: %s with rowOrderRef: %d\n", queryGetData, rowOrderRef)
			row := s.db.QueryRow(queryGetData, rowOrderRef)
			var price types.PriceItem
			var fromQtyStr, toQtyStr, salePrice1Str, salePrice2Str sql.NullString
			var fromDate, toDate sql.NullString
			err := row.Scan(
				&price.RowOrderRef,
				&price.IcCode,
				&price.UnitCode,
				&fromQtyStr,
				&toQtyStr,
				&fromDate,
				&toDate,
				&price.SaleType,
				&salePrice1Str,
				&price.Status,
				&price.PriceType,
				&price.CustCode,
				&salePrice2Str,
				&price.CustGroup1,
				&price.PriceMode,
			)
			if err != nil {
				return nil, nil, nil, nil, fmt.Errorf("error scanning price row: %v", err)
			}
			// ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
			if fromQtyStr.Valid {
				if fromQty, err := strconv.ParseFloat(fromQtyStr.String, 64); err == nil {
					price.FromQty = fromQty
				}
			}
			if toQtyStr.Valid {
				if toQty, err := strconv.ParseFloat(toQtyStr.String, 64); err == nil {
					price.ToQty = toQty
				}
			}
			if salePrice1Str.Valid {
				if salePrice1, err := strconv.ParseFloat(salePrice1Str.String, 64); err == nil {
					price.SalePrice1 = salePrice1
				}
			}
			if salePrice2Str.Valid {
				if salePrice2, err := strconv.ParseFloat(salePrice2Str.String, 64); err == nil {
					price.SalePrice2 = salePrice2
				}
			}
			// ‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
			if fromDate.Valid {
				price.FromDate = fromDate.String
			}
			if toDate.Valid {
				price.ToDate = toDate.String
			}
			// ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô map ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö API
			priceMap := map[string]interface{}{
				"row_order_ref": price.RowOrderRef,
				"ic_code":       price.IcCode,
				"unit_code":     price.UnitCode,
				"from_qty":      price.FromQty,
				"to_qty":        price.ToQty,
				"from_date":     price.FromDate,
				"to_date":       price.ToDate,
				"sale_type":     price.SaleType,
				"sale_price1":   price.SalePrice1,
				"status":        price.Status,
				"price_type":    price.PriceType,
				"cust_code":     price.CustCode,
				"sale_price2":   price.SalePrice2,
				"cust_group_1":  price.CustGroup1,
				"price_mode":    price.PriceMode,
			} // ‡πÅ‡∏¢‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ï‡∏≤‡∏° active_code
			if activeCode == 1 {
				// activeCode = 1: INSERT ‡πÉ‡∏´‡∏°‡πà
				inserts = append(inserts, priceMap)
			}
			if activeCode == 2 {
				// activeCode = 2: DELETE ‡∏ö‡∏ô server ‡∏Å‡πà‡∏≠‡∏ô ‡πÅ‡∏•‡πâ‡∏ß INSERT ‡πÉ‡∏´‡∏°‡πà (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà UPDATE)
				deletes = append(deletes, rowOrderRef) // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤ deletes ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏ö‡∏ö‡∏ô server ‡∏Å‡πà‡∏≠‡∏ô
				inserts = append(inserts, priceMap)    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤ inserts ‡πÄ‡∏û‡∏∑‡πà‡∏≠ insert ‡πÉ‡∏´‡∏°‡πà
			}
		} else if activeCode == 3 {
			deletes = append(deletes, rowOrderRef)
		}
	}

	return syndIds, inserts, updates, deletes, nil
}

// DeleteSyncRecordsInBatches ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å sml_market_sync ‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡πâ‡∏≠‡∏á‡∏ñ‡∏¥‡πà‡∏ô‡πÅ‡∏ö‡∏ö‡πÅ‡∏ö‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô batch
func (s *PriceSyncStep) DeleteSyncRecordsInBatches(syncIds []int, batchSize int) error {
	if len(syncIds) == 0 {
		fmt.Println("‚úÖ ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏•‡∏ö‡∏à‡∏≤‡∏Å sml_market_sync")
		return nil
	}

	totalItems := len(syncIds)
	fmt.Printf("üóëÔ∏è ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á sml_market_sync (local database): %d ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ (‡πÅ‡∏ö‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô batch ‡∏•‡∏∞ %d ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£)\n",
		totalItems, batchSize)

	// ‡πÅ‡∏ö‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô batch
	batchCount := (totalItems + batchSize - 1) / batchSize
	totalDeleted := 0
	successBatches := 0
	failedBatches := 0

	for b := 0; b < batchCount; b++ {
		start := b * batchSize
		end := start + batchSize
		if end > totalItems {
			end = totalItems
		}

		batchIds := syncIds[start:end]
		currentBatchSize := len(batchIds)

		fmt.Printf("   üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡∏ö batch ‡∏ó‡∏µ‡πà %d/%d (‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ %d-%d) ‡∏à‡∏≤‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î %d ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£\n",
			b+1, batchCount, start+1, end, totalItems)

		// ‡∏™‡∏£‡πâ‡∏≤‡∏á query ‡πÅ‡∏•‡∏∞ parameter placeholders
		placeholders := make([]string, len(batchIds))
		args := make([]interface{}, len(batchIds))

		for i, id := range batchIds {
			placeholders[i] = fmt.Sprintf("$%d", i+1)
			args[i] = id
		}

		// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á DELETE
		query := fmt.Sprintf("DELETE FROM sml_market_sync WHERE id IN (%s)",
			joinStrings(placeholders, ", "))

		// ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
		result, err := s.db.Exec(query, args...)
		if err != nil {
			fmt.Printf("   ‚ùå ERROR: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• batch ‡∏ó‡∏µ‡πà %d ‡∏à‡∏≤‡∏Å sml_market_sync ‡πÑ‡∏î‡πâ: %v\n",
				b+1, err)
			failedBatches++
			// ‡∏ó‡∏≥ batch ‡∏ï‡πà‡∏≠‡πÑ‡∏õ
			continue
		}

		rowsAffected, err := result.RowsAffected()
		if err != nil {
			fmt.Printf("   ‚ö†Ô∏è Warning: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡πÑ‡∏î‡πâ: %v\n", err)
			rowsAffected = int64(currentBatchSize) // ‡πÉ‡∏ä‡πâ‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡∏≠‡∏á batch ‡πÅ‡∏ó‡∏ô
		}

		totalDeleted += int(rowsAffected)
		successBatches++
		fmt.Printf("   ‚úÖ ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• batch ‡∏ó‡∏µ‡πà %d ‡∏à‡∏≤‡∏Å sml_market_sync ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: %d ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£\n",
			b+1, rowsAffected)

		// ‡∏´‡∏ô‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á batch ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏î‡∏†‡∏≤‡∏£‡∏∞‡∏Ç‡∏≠‡∏á database
		if b < batchCount-1 {
			time.Sleep(100 * time.Millisecond)
		}
	}

	// ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£
	if failedBatches > 0 {
		fmt.Printf("‚ö†Ô∏è ‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å sml_market_sync: ‡∏•‡∏ö‡πÑ‡∏î‡πâ %d/%d ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ (%d/%d batches ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à)\n",
			totalDeleted, totalItems, successBatches, batchCount)
		return fmt.Errorf("‡∏°‡∏µ‡∏ö‡∏≤‡∏á batch ‡∏ó‡∏µ‡πà‡∏•‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%d/%d batches ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß)",
			failedBatches, batchCount)
	}

	fmt.Printf("‚úÖ ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å sml_market_sync ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß: %d ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ (%d batches)\n",
		totalDeleted, batchCount)
	return nil
}

// joinStrings ‡πÄ‡∏õ‡πá‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏ß‡∏° string ‡∏î‡πâ‡∏ß‡∏¢‡∏ï‡∏±‡∏ß‡∏Ñ‡∏±‡πà‡∏ô
func joinStrings(elements []string, separator string) string {
	if len(elements) == 0 {
		return ""
	}
	result := elements[0]
	for i := 1; i < len(elements); i++ {
		result += separator + elements[i]
	}
	return result
}
