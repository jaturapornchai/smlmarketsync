package steps

import (
	"database/sql"
	"fmt"
	"smlmarketsync/config"
	"smlmarketsync/types"
	"strconv"
)

type BalanceSyncStep struct {
	db        *sql.DB
	apiClient *config.APIClient
}

func NewBalanceSyncStep(db *sql.DB) *BalanceSyncStep {
	return &BalanceSyncStep{
		db:        db,
		apiClient: config.NewAPIClient(),
	}
}

// ExecuteBalanceSync ‡∏£‡∏±‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 5: ‡∏Å‡∏≤‡∏£ sync balance
func (s *BalanceSyncStep) ExecuteBalanceSync() error {
	fmt.Println("=== ‡∏ã‡∏¥‡∏á‡∏Ñ‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• balance ‡∏Å‡∏±‡∏ö API ===")

	// 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á ic_balance
	fmt.Println("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á ic_balance ‡∏ö‡∏ô API...")
	err := s.apiClient.CreateBalanceTable()
	if err != nil {
		return fmt.Errorf("error creating balance table: %v", err)
	}
	fmt.Println("‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö/‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á ic_balance ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")

	// 2. ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• balance ‡∏à‡∏≤‡∏Å local database
	fmt.Println("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• balance ‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• local...")
	localData, err := s.GetAllBalanceFromSource()
	if err != nil {
		return fmt.Errorf("error getting local balance data: %v", err)
	}

	if len(localData) == 0 {
		fmt.Println("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• balance ‡πÉ‡∏ô local database")
		return nil
	}
	fmt.Printf("‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• balance ‡∏à‡∏≤‡∏Å local ‡πÑ‡∏î‡πâ %d ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£\n", len(localData))
	// 3. ‡∏ã‡∏¥‡∏á‡∏Ñ‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏î‡∏¢‡∏™‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÅ‡∏ö‡∏ö batch 
	fmt.Println("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ã‡∏¥‡∏á‡∏Ñ‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• balance...")
	fmt.Printf("üì¶ ‡∏à‡∏∞‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• %d ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£\n", len(localData))

	// ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏£‡∏Å
	if len(localData) > 0 {
		fmt.Printf("‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏£‡∏Å: %v\n", localData[0])
	} 
	totalCount, err := s.apiClient.SyncInventoryBalanceData(localData)
	if err != nil {
		return fmt.Errorf("error syncing balance data to API: %v", err)
	}
		


	fmt.Printf("‚úÖ ‡∏ã‡∏¥‡∏á‡∏Ñ‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• balance ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß\n")
	fmt.Printf("üìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ã‡∏¥‡∏á‡∏Ñ‡πå balance:\n")
	fmt.Printf("   - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ã‡∏¥‡∏á‡∏Ñ‡πå: %d ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ (‡πÅ‡∏ö‡∏ö batch)\n", totalCount)

	return nil
}

// GetAllBalanceFromSource ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• balance ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡πâ‡∏ô‡∏ó‡∏≤‡∏á
func (s *BalanceSyncStep) GetAllBalanceFromSource() ([]interface{}, error) {
	query := `
		SELECT 
			itd.item_code AS ic_code,
			itd.wh_code AS warehouse,
			ii.unit_standard AS ic_unit_code,
			COALESCE(SUM(itd.calc_flag * (
				CASE WHEN ((itd.trans_flag IN (70,54,60,58,310,12) OR (itd.trans_flag=66 AND itd.qty>0) OR (itd.trans_flag=14 AND itd.inquiry_type=0) OR (itd.trans_flag=48 AND itd.inquiry_type < 2)) 
						  OR (itd.trans_flag IN (56,68,72,44) OR (itd.trans_flag=66 AND itd.qty<0) OR (itd.trans_flag=46 AND itd.inquiry_type IN (0,2))  
							  OR (itd.trans_flag=16 AND itd.inquiry_type IN (0,2)) OR (itd.trans_flag=311 AND itd.inquiry_type=0)) 
						  AND NOT (itd.doc_ref <> '' AND itd.is_pos = 1))
					 THEN ROUND((itd.qty*itd.stand_value) / itd.divide_value, 2) 
					 ELSE 0 
				END)), 0) AS balance_qty
		FROM ic_trans_detail itd
		INNER JOIN ic_inventory ii ON ii.code = itd.item_code AND ii.item_type NOT IN (1,3)
		WHERE itd.last_status = 0 
		  AND itd.item_type <> 5  
		  AND itd.is_doc_copy = 0
		GROUP BY itd.item_code, itd.wh_code, ii.unit_standard
		HAVING COALESCE(SUM(itd.calc_flag * (
			CASE WHEN ((itd.trans_flag IN (70,54,60,58,310,12) OR (itd.trans_flag=66 AND itd.qty>0) OR (itd.trans_flag=14 AND itd.inquiry_type=0) OR (itd.trans_flag=48 AND itd.inquiry_type < 2)) 
					  OR (itd.trans_flag IN (56,68,72,44) OR (itd.trans_flag=66 AND itd.qty<0) OR (itd.trans_flag=46 AND itd.inquiry_type IN (0,2))  
						  OR (itd.trans_flag=16 AND itd.inquiry_type IN (0,2)) OR (itd.trans_flag=311 AND itd.inquiry_type=0)) 
					  AND NOT (itd.doc_ref <> '' AND itd.is_pos = 1))
				 THEN ROUND((itd.qty*itd.stand_value) / itd.divide_value, 2) 
				 ELSE 0 
			END)), 0) <> 0
		ORDER BY itd.item_code, itd.wh_code
	`

	fmt.Println("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• balance ‡∏à‡∏≤‡∏Å ic_trans_detail ‡πÅ‡∏•‡∏∞ ic_inventory...")
	rows, err := s.db.Query(query)
	if err != nil {
		return nil, fmt.Errorf("error executing balance query: %v", err)
	}
	defer rows.Close()

	var balances []interface{}
	count := 0

	for rows.Next() {
		var balance types.BalanceItem
		var balanceQtyStr string

		err := rows.Scan(
			&balance.IcCode,
			&balance.Warehouse,
			&balance.UnitCode,
			&balanceQtyStr,
		)
		if err != nil {
			fmt.Printf("‚ö†Ô∏è ‡∏Ç‡πâ‡∏≤‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ: %v\n", err)
			continue
		}

		// ‡πÅ‡∏õ‡∏•‡∏á balance_qty ‡∏à‡∏≤‡∏Å string ‡πÄ‡∏õ‡πá‡∏ô float64
		balanceQty, err := strconv.ParseFloat(balanceQtyStr, 64)
		if err != nil {
			fmt.Printf("‚ö†Ô∏è ‡∏Ç‡πâ‡∏≤‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÅ‡∏õ‡∏•‡∏á balance_qty ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ: %s -> %v\n", balanceQtyStr, err)
			continue
		}
		balance.BalanceQty = balanceQty
		// ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô map ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö API
		balanceMap := map[string]interface{}{
			"ic_code":      balance.IcCode,
			"warehouse":    balance.Warehouse, // Field name in API is 'warehouse'
			"ic_unit_code": balance.UnitCode,  // Field name in API is 'ic_unit_code'
			"balance_qty":  balance.BalanceQty,
		}

		balances = append(balances, balanceMap)
		count++

		// ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏∏‡∏Å‡πÜ 2000 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
		if count%2000 == 0 {
			fmt.Printf("‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• balance ‡πÅ‡∏•‡πâ‡∏ß %d ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£...\n", count)
		}
	}

	if err = rows.Err(); err != nil {
		return nil, fmt.Errorf("error iterating balance rows: %v", err)
	}
	fmt.Printf("‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• balance ‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡πÑ‡∏î‡πâ %d ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£\n", count)

	// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö
	if len(balances) > 0 {
		sampleItem := balances[0]
		fmt.Printf("‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• balance ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏™‡πà‡∏á‡πÑ‡∏õ API (‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏£‡∏Å): %+v\n", sampleItem)
	}

	return balances, nil
}
