package main

import (
	"fmt"
	"log"
	"smlmarketsync/config"
	"smlmarketsync/steps"
)

func main() {
	fmt.Println("=== ‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏ã‡∏¥‡∏á‡∏Ñ‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÑ‡∏õ ic_inventory_barcode ===")

	// ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡πâ‡∏ô‡∏ó‡∏≤‡∏á (Read-only ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•)
	dbConfig := config.NewDatabaseConfig()
	db, err := dbConfig.Connect()
	if err != nil {
		log.Fatal("Failed to connect to source database:", err)
	}
	defer db.Close()

	// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö ‡∏ö‡∏ô database ‡∏ß‡πà‡∏≤‡∏°‡∏µ Table sml_market_sync ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
	if !config.TableExists(db, "sml_market_sync") {
		// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á sml_market_sync ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
		err = config.CreateSyncTable(db)
		if err != nil {
			log.Fatalf("Failed to create sml_market_sync table: %v", err)
		}
		fmt.Println("‚úÖ ‡∏ï‡∏≤‡∏£‡∏≤‡∏á sml_market_sync ‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
	} else {
		fmt.Println("‚úÖ ‡∏ï‡∏≤‡∏£‡∏≤‡∏á sml_market_sync ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß")
	}
	// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö ‡∏ö‡∏ô database ‡∏ß‡πà‡∏≤‡∏°‡∏µ ‡πÉ‡∏ô table ic_inventory_price ‡∏°‡∏µ tigger ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
	if !config.TriggerExists(db, "ic_inventory_price") {
		// ‡∏™‡∏£‡πâ‡∏≤‡∏á trigger ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ic_inventory_price ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
		err = config.CreatePriceTrigger(db)
		if err != nil {
			log.Fatalf("Failed to create trigger for ic_inventory_price: %v", err)
		}
		fmt.Println("‚úÖ Trigger ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ic_inventory_price ‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
	} else {
		fmt.Println("‚úÖ Trigger ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ic_inventory_price ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß")
	}

	// ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 7: Sync Price
	fmt.Println("\nüîÑ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡∏≤‡∏£ sync ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (Step 7)")
	priceStep := steps.NewPriceSyncStep(db)
	err = priceStep.ExecutePriceSync()
	if err != nil {
		log.Fatalf("‚ùå Error in price sync step: %v", err)
	}
	fmt.Println("‚úÖ ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡∏≤‡∏£ sync ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô")

	/*// ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 1-3: Sync ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (Product/Inventory)
	fmt.Println("\nüîÑ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡∏≤‡∏£ sync ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (Steps 1-3)")
	productStep := steps.NewProductSyncStep(db)
	err = productStep.ExecuteProductSync()
	if err != nil {
		log.Fatalf("‚ùå Error in product sync steps: %v", err)
	}
	fmt.Println("‚úÖ ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡∏≤‡∏£ sync ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô")

	// ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 5: Sync Balance
	fmt.Println("\nüîÑ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡∏≤‡∏£ sync balance (Step 5)")
	balanceStep := steps.NewBalanceSyncStep(db)
	err = balanceStep.ExecuteBalanceSync()
	if err != nil {
		log.Fatalf("‚ùå Error in balance sync step: %v", err)
	}
	fmt.Println("‚úÖ ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡∏≤‡∏£ sync balance ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô")

	// ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 6: Sync Customer
	fmt.Println("\nüîÑ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡∏≤‡∏£ sync ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ (Step 6)")
	customerStep := steps.NewCustomerSyncStep(db)
	err = customerStep.ExecuteCustomerSync()
	if err != nil {
		log.Fatalf("‚ùå Error in customer sync step: %v", err)
	}
	fmt.Println("‚úÖ ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡∏≤‡∏£ sync ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô")

	fmt.Println("\nüéâ ‡∏Å‡∏≤‡∏£‡∏ã‡∏¥‡∏á‡∏Ñ‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡∏ó‡∏∏‡∏Å‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô!")
	fmt.Println("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ñ‡∏π‡∏Å‡∏ã‡∏¥‡∏á‡∏Ñ‡πå‡∏Ñ‡∏£‡∏ö‡∏ó‡∏∏‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á: ic_inventory_barcode, ic_balance, ar_customer, ‡πÅ‡∏•‡∏∞ ic_inventory_price")*/
}
